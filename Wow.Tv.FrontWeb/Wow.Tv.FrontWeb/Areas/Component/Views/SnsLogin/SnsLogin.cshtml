@{
/*
    -- SNS 로그인 모듈 사용방법 ---------------------------------------------------
    네이버를 사례로 설명. 카카오, 페이스북 호출 시 동일함

    1. 환경 설정
     - 아래와 같이 SNS 설정값을 Web.Config에 추가합니다.

    <add key="DomainUrlMember" value="http://172.19.0.22:8090" />
    <add key="KakaoJavascriptKey" value="4b2cb7f4cc46fe49dc2686b8b4fd3ba1" />
    <add key="FacebookAppId" value="1934458713480006" />
    <add key="FacebookAPIVer" value="v2.10" />
    <add key="NaverClientId" value="ZrqlwXeUGGsoKv0j3adz" />
    <add key="NaverServiceUrl" value="http://localhost:8090" />
    <add key="NaverLoginCallbackUrl" value="http://localhost:8090/Component/SnsLogin/NaverLoginCallback" />


    2. 뷰 설정
     - 사용하고자 하는 뷰에서 아래와 같이 선언합니다.

    SnsLoginParameter snsLoginParameter = new SnsLoginParameter();
    snsLoginParameter.LoginActionType = { SnsLoginActionType Enum 사용. AutoWowLogin: 자동 정식 로그인, AutoEasyLogin: 자동 간편 로그인, Manual: 수동처리 };
    snsLoginParameter.NaverReturnFunction = "네이버 팝업 이후 호출하고자 하는 함수명. 리턴 False를 하면 로그인 처리를 하지 않습니다.";
    snsLoginParameter.KakaoReturnFunction = "카카오 팝업 이후 호출하고자 하는 함수명. 리턴 False를 하면 로그인 처리를 하지 않습니다.";
    snsLoginParameter.FacebookReturnFunction = "페이스북 팝업 이후 호출하고자 하는 함수명";

    @Html.Partial("~/Views/Component/SnsLogin/SnsLogin.cshtml", snsLoginParameter)


    3. SNS 로그인 팝업
     - NaverLogin.OpenPopup();


    4. SNS 로그인 팝업 이후
     - snsLoginParameter.NaverReturnFunction 에 설정한 함수 실행
     - 자동모드인 경우 위 함수 실행 후 로그인 처리
     - 수동모드인 경우 위 함수만 실행
*/
}
@using Wow.Tv.Middle.Model.Common
@model Wow.Tv.Middle.Model.Common.SnsLoginParameter
@if (Model.KakaoJavascriptIncrude == true)
{
    <script src="//developers.kakao.com/sdk/js/kakao.min.js"></script>
}
<script type="text/javascript" src="https://static.nid.naver.com/js/naverLogin_implicit-1.0.3.js" charset="utf-8"></script>
<script type="text/javascript">
    var _UserLoginProcUrl = "@System.Configuration.ConfigurationManager.AppSettings["UserLoginProcUrl"]";
    var _UserEasyLoginProcUrl = "@System.Configuration.ConfigurationManager.AppSettings["UserEasyLoginProcUrl"]";

    var NaverLogin = {
        _ClientId: "@System.Configuration.ConfigurationManager.AppSettings["NaverClientId"]",
        _ServiceUrl: "@System.Configuration.ConfigurationManager.AppSettings["NaverServiceUrl"]",
        _CallbackUrl: "@System.Configuration.ConfigurationManager.AppSettings["NaverLoginCallbackUrl"]",
        Id: 0,
        Name: "",
        Email: "",
        AccountRelated: false,
        ReturnUrl: "",
        ErrorMessage: "",

        OpenPopup: function () {

            NaverLogin.Id = 0;
            NaverLogin.Name = "";
            NaverLogin.Email = "";
            NaverLogin.AccountRelated = false;
            NaverLogin.ErrorMessage = "";

            var naverIdLogin = new naver_id_login(NaverLogin._ClientId, NaverLogin._CallbackUrl);
            var state = naverIdLogin.getUniqState();
            naverIdLogin.setButton("white", 2, 40);
            naverIdLogin.setDomain(NaverLogin._ServiceUrl);
            naverIdLogin.setState(state);
            naverIdLogin.setPopup();
            naverIdLogin.init_naver_id_login();
            var naverPopupUrl = naverIdLogin.getNaverIdLoginLink();

            window.open(naverPopupUrl, "LoginByNaver", "width=500, height=461, top=100, left=100, fullscreen=no, menubar=no, status=no, toolbar=no, titlebar=yes, location=no, scrollbar=no");
        },
        PopupResult: function (id, email, name) {
            $.ajax({
                type: "get",
                url: "/Component/SnsLogin/GetNaverUserInfoExists",
                data: { naverId: id },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    NaverLogin.Id = id;
                    NaverLogin.Email = email;
                    NaverLogin.Name = name;
                    NaverLogin.AccountRelated = data.Exists;
                    var loginContinue = false;

                    @if (string.IsNullOrEmpty(Model.NaverReturnFunction) == false)
                    {
                        @Html.Raw("loginContinue = " + Model.NaverReturnFunction + "();");
                    }

                    @if (Model.LoginActionType == SnsLoginActionType.AutoWowLogin)
                    {
                        @Html.Raw("if (loginContinue == true || loginContinue == null) { if (NaverLogin.ReturnUrl != \"\") { $(\"#hidReturnUrl\").val(NaverLogin.ReturnUrl); } NaverLogin.WowLogin(); }");
                    }
                    else if (Model.LoginActionType == SnsLoginActionType.AutoEasyLogin)
                    {
                        @Html.Raw("if (loginContinue == true || loginContinue == null) { if (NaverLogin.ReturnUrl != \"\") { $(\"#hidReturnUrl\").val(NaverLogin.ReturnUrl); } NaverLogin.EasyLogin(); }");
                    }
                },
                error: function (e) {
                    console.log("error ==> " + JSON.stringify(e));
                }
            });
        },
        WowLogin: function () {
            NaverLogin.ErrorMessage = "";
            if (NaverLogin.AccountRelated == true) {
                $("#frmLoginBySns [id='hidLoginFrom']").val("@((int)LoginDomain.Naver)");
                $("#frmLoginBySns [id='hidNaverId']").val(NaverLogin.Id);
                $("#frmLoginBySns [id='hidNaverEmail']").val(NaverLogin.Email);
                $("#frmLoginBySns [id='hidNaverName']").val(NaverLogin.Name);
                $("#frmLoginBySns").prop("action", _UserLoginProcUrl);
                $("#frmLoginBySns").submit();
                return true;
            }
            else {
                NaverLogin.ErrorMessage = "연결된 계정이 없습니다.";
                return false;
            }
        },
        EasyLogin: function () {
            NaverLogin.ErrorMessage = "";
            $("#frmLoginBySns [id='hidLoginFrom']").val("@((int)LoginDomain.Naver)");
            $("#frmLoginBySns [id='hidNaverId']").val(NaverLogin.Id);
            $("#frmLoginBySns [id='hidNaverEmail']").val(NaverLogin.Email);
            $("#frmLoginBySns [id='hidNaverName']").val(NaverLogin.Name);
            $("#frmLoginBySns").prop("action", _UserEasyLoginProcUrl);
            $("#frmLoginBySns").submit();
            return true;
        }
    }

    var KakaoLogin = {
        _JavascriptKey: "@System.Configuration.ConfigurationManager.AppSettings["KakaoJavascriptKey"]",
        Id: 0,
        Nickname: "",
        Email: "",
        AccountRelated: false,
        ReturnUrl: "",
        ErrorMessage: "",

        OpenPopup: function () {

            KakaoLogin.Id = 0;
            KakaoLogin.Nickname = "";
            KakaoLogin.Email = "";
            KakaoLogin.AccountRelated = false;
            KakaoLogin.ErrorMessage = "";

            Kakao.Auth.login({
                success: function (authObj) {
                    var callbackMessage = JSON.stringify(authObj);
                    $.ajax({
                        type: "get",
                        url: "/Component/SnsLogin/GetKakaoUserInfoExists",
                        data: { callbackMessage: callbackMessage },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        async: false,
                        success: function (data) {

                            KakaoLogin.AccountRelated = data.Exists;
                            KakaoLogin.EmailVerified = data.EmailVerified;
                            //if (data.EmailVerified == true) {
                            KakaoLogin.Id = data.Id;
                            KakaoLogin.Nickname = data.Nickname;
                            KakaoLogin.Email = data.Email;
                            var loginContinue = false;

                            @if (string.IsNullOrEmpty(Model.NaverReturnFunction) == false)
                            {
                                @Html.Raw("loginContinue = " + Model.KakaoReturnFunction + "();");
                            }
                            @if (Model.LoginActionType == SnsLoginActionType.AutoWowLogin)
                            {
                                @Html.Raw("if (loginContinue == true || loginContinue == null) { if (KakaoLogin.ReturnUrl != \"\") { $(\"#hidReturnUrl\").val(KakaoLogin.ReturnUrl); } KakaoLogin.WowLogin(); }");
                            }
                            else if (Model.LoginActionType == SnsLoginActionType.AutoEasyLogin)
                            {
                                @Html.Raw("if (loginContinue == true || loginContinue == null) { if (KakaoLogin.ReturnUrl != \"\") { $(\"#hidReturnUrl\").val(KakaoLogin.ReturnUrl); } KakaoLogin.EasyLogin(); }");
                            }
                            //}
                            //else {
                            //    alert("카카오에 등록된 이메일이 미인증 상태입니다.");
                            //}
                        },
                        error: function (e) {
                            console.log("error ==> " + JSON.stringify(e));
                        }
                    });
                },
                fail: function (err) {
                    alert(JSON.stringify(err));
                }
            });
        },
        WowLogin: function () {
            KakaoLogin.ErrorMessage = "";
            if (KakaoLogin.AccountRelated == true) {
                $("#frmLoginBySns [id='hidLoginFrom']").val("@((int)LoginDomain.Kakao)");
                $("#frmLoginBySns [id='hidKakaoId']").val(KakaoLogin.Id);
                $("#frmLoginBySns [id='hidKakaoEmail']").val(KakaoLogin.Email);
                $("#frmLoginBySns [id='hidKakaoNickname']").val(KakaoLogin.Nickname);
                $("#frmLoginBySns").prop("action", _UserLoginProcUrl);
                $("#frmLoginBySns").submit();
                return true;
            }
            else {
                WowLogin.ErrorMessage = "연결된 계정이 없습니다.";
                return false;
            }
        },
        EasyLogin: function () {
            var isSuccess = false;
            $("#frmLoginBySns [id='hidLoginFrom']").val("@((int)LoginDomain.Kakao)");
            $("#frmLoginBySns [id='hidKakaoId']").val(KakaoLogin.Id);
            $("#frmLoginBySns [id='hidKakaoEmail']").val(KakaoLogin.Email);
            $("#frmLoginBySns [id='hidKakaoNickname']").val(KakaoLogin.Nickname);
            $("#frmLoginBySns").prop("action", _UserEasyLoginProcUrl);
            $("#frmLoginBySns").submit();
            return true;
        }
    }

    var FacebookLogin = {
        _AppId: "@System.Configuration.ConfigurationManager.AppSettings["FacebookAppId"]",
        _ApiVersion: "@System.Configuration.ConfigurationManager.AppSettings["FacebookAPIVer"]",
        Id: 0,
        Name: "",
        Email: "",
        AccountRelated: false,
        ReturnUrl: "",
        ErrorMessage: "",
        OpenPopup: function () {
            FB.login(FaceBookApp.statusChangeCallback, FaceBookApp.FBScopes);
        },
        WowLogin: function () {
            FacebookLogin.ErrorMessage = "";
            if (FacebookLogin.AccountRelated == true) {
                $("#frmLoginBySns [id='hidLoginFrom']").val("@((int)LoginDomain.Facebook)");
                $("#frmLoginBySns [id='hidFacebookId']").val(FacebookLogin.Id);
                $("#frmLoginBySns [id='hidFacebookEmail']").val(FacebookLogin.Email);
                $("#frmLoginBySns [id='hidFacebookName']").val(FacebookLogin.Name);
                $("#frmLoginBySns").prop("action", _UserLoginProcUrl);
                $("#frmLoginBySns").submit();
                return true;
            }
            else {
                FacebookLogin.ErrorMessage = "연결된 계정이 없습니다.";
                return false;
            }
        },
        EasyLogin: function () {
            FacebookLogin.ErrorMessage = "";
            $("#frmLoginBySns [id='hidLoginFrom']").val("@((int)LoginDomain.Facebook)");
            $("#frmLoginBySns [id='hidFacebookId']").val(FacebookLogin.Id);
            $("#frmLoginBySns [id='hidFacebookEmail']").val(FacebookLogin.Email);
            $("#frmLoginBySns [id='hidFacebookName']").val(FacebookLogin.Name);
            $("#frmLoginBySns").prop("action", _UserEasyLoginProcUrl);
            $("#frmLoginBySns").submit();
            return true;
        }
    }

    var FaceBookApp = {
        FBScopes: { scope: 'public_profile,email' },
        accessToken: '',
        init: function (d, s, id) {
            window.fbAsyncInit = function () {
                FB.init({
                    appId: FacebookLogin._AppId,
                    xfbml: true,
                    version: FacebookLogin._ApiVersion,
                    status: false,
                    cookie: false
                });
            };
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) { return; }
            js = d.createElement(s); js.id = id;
            js.src = "https://connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        },

        statusChangeCallback: function (response) {
            if (response.authResponse != null) {
                FaceBookApp.accessToken = response.authResponse.accessToken;
                if (response.status === 'connected') {
                    // 연결성공
                    FaceBookApp.FBsigninCallback();
                } else if (response.status === 'not_authorized') {
                    // 인증실패. 페이스북 로그인은 성공. 앱 로그인 실패(ex: 토큰값이 오지 않음)
                } else {
                    // 기타 (페이스북 웹/앱 로그인 둘다 안 됨)
                }
            }
        },

        FBsigninCallback: function () {
            FB.api('/me?fields=id,email,name', function (response) {
                var id = response.id;			// 사용자 고유 번호
                var token = FaceBookApp.accessToken;
                var memberName = response.name;	// 사용자 이름
                var email = response.email;		// 사용자 아이디

                $.ajax({
                    type: "get",
                    url: "/Component/SnsLogin/GetFacebookUserInfoExists",
                    data: { facebookId: id, callbackMessage: JSON.stringify(response) },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: false,
                    success: function (data) {
                        FacebookLogin.AccountRelated = data.Exists;
                        FacebookLogin.Id = id;
                        FacebookLogin.Name = memberName;
                        FacebookLogin.Email = email;
                        var loginContinue = false;

                        @if (string.IsNullOrEmpty(Model.NaverReturnFunction) == false)
                        {
                            @Html.Raw("loginContinue = " + Model.FacebookReturnFunction + "();");
                        }

                        @if (Model.LoginActionType == SnsLoginActionType.AutoWowLogin)
                        {
                            @Html.Raw("if (loginContinue == true || loginContinue == null) { if (FacebookLogin.ReturnUrl != \"\") { $(\"#hidReturnUrl\").val(FacebookLogin.ReturnUrl); } FacebookLogin.WowLogin(); }");
                        }
                        else if (Model.LoginActionType == SnsLoginActionType.AutoEasyLogin)
                        {
                            @Html.Raw("if (loginContinue == true || loginContinue == null) { if (FacebookLogin.ReturnUrl != \"\") { $(\"#hidReturnUrl\").val(FacebookLogin.ReturnUrl); } FacebookLogin.EasyLogin(); }");
                        }
                    },
                    error: function (e) {
                        console.log("error ==> " + JSON.stringify(e));
                    }
                });
            });
        }
    }

    $(document).ready(function () {
        Kakao.init(KakaoLogin._JavascriptKey);
        FaceBookApp.init(document, 'script', 'facebook-jssdk');
    });
</script>
<a id="naver_id_login" style="display:none;"></a>

<form id="frmLoginBySns" method="post">
    <input type="hidden" id="hidReturnUrl" name="hidReturnUrl" value="@Html.Raw(HttpContext.Current.Request.Url.AbsoluteUri)" />
    <input type="hidden" id="hidLoginFrom" name="hidLoginFrom" />
    <input type="hidden" id="hidNaverId" name="hidNaverId" />
    <input type="hidden" id="hidNaverEmail" name="hidNaverEmail" />
    <input type="hidden" id="hidNaverName" name="hidNaverName" />
    <input type="hidden" id="hidKakaoId" name="hidKakaoId" />
    <input type="hidden" id="hidKakaoEmail" name="hidKakaoEmail" />
    <input type="hidden" id="hidKakaoNickname" name="hidKakaoNickname" />
    <input type="hidden" id="hidFacebookId" name="hidFacebookId" />
    <input type="hidden" id="hidFacebookEmail" name="hidFacebookEmail" />
    <input type="hidden" id="hidFacebookName" name="hidFacebookName" />
</form>
